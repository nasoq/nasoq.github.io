{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NASOQ is a scalable and efficient Quadratic Programming solver that obtains solutions to requested accuracies. In addition, the NASOQ library includes linear system solver for indefinite systems which is named LBL. NASOQ is tested for an extensive number of QP problems from real application that is also shared and is accessible from this repositoy. Why NASOQ? NASOQ is: Accurate: NASOQ converges to all reasonable requested accuracy thresholds. NASOQ provides the lowest failure rate among esiting open-source and commercial solvers for a range of real QP problems. Fast: NASOQ uses an efficient sparsity-oriented row modification algorithm (SOMOD) and a fast indefinite solver (LBL) enabling quick solve of intermediate indefinite linear system of equations arising along the QP solve. Versatile: NASOQ efficiently and accurately solves QP problems from a wide range of applications including contact simulation, shape deformation, model predictive control, model reconstruction and ... . Scalable: NASOQ uses the sparsity pattern of the problem to efficiently solve QP problems with small to large number of variables and constraints. Problems from 10 to 100 thounds of variables and from 10 to thounds of linear constraints. Citing us @article{Cheshmi2020NASOQ, author = {Cheshmi, Kazem and Kaufman, Danny M. and Kamil, Shoaib and Dehnavi, Maryam Mehri}, title = {NASOQ: Numerically Accurate Sparsity-Oriented QP Solver}, journal = {ACM Transactions on Graphics}, year = {2020}, volume = {39}, number = {4} } Credits The people have been involved in the developement of NASOQ: Kazem Cheshmi Danny M. Kaufman Shoaib Kamil Maryam Mehri Dehnavi","title":"Overview"},{"location":"#why-nasoq","text":"NASOQ is: Accurate: NASOQ converges to all reasonable requested accuracy thresholds. NASOQ provides the lowest failure rate among esiting open-source and commercial solvers for a range of real QP problems. Fast: NASOQ uses an efficient sparsity-oriented row modification algorithm (SOMOD) and a fast indefinite solver (LBL) enabling quick solve of intermediate indefinite linear system of equations arising along the QP solve. Versatile: NASOQ efficiently and accurately solves QP problems from a wide range of applications including contact simulation, shape deformation, model predictive control, model reconstruction and ... . Scalable: NASOQ uses the sparsity pattern of the problem to efficiently solve QP problems with small to large number of variables and constraints. Problems from 10 to 100 thounds of variables and from 10 to thounds of linear constraints.","title":"Why NASOQ?"},{"location":"#citing-us","text":"@article{Cheshmi2020NASOQ, author = {Cheshmi, Kazem and Kaufman, Danny M. and Kamil, Shoaib and Dehnavi, Maryam Mehri}, title = {NASOQ: Numerically Accurate Sparsity-Oriented QP Solver}, journal = {ACM Transactions on Graphics}, year = {2020}, volume = {39}, number = {4} }","title":"Citing us"},{"location":"#credits","text":"The people have been involved in the developement of NASOQ: Kazem Cheshmi Danny M. Kaufman Shoaib Kamil Maryam Mehri Dehnavi","title":"Credits"},{"location":"examples/","text":"Shape deformation Contact simulations Model predictive control","title":"Examples"},{"location":"examples/#shape-deformation","text":"","title":"Shape deformation"},{"location":"examples/#contact-simulations","text":"","title":"Contact simulations"},{"location":"examples/#model-predictive-control","text":"","title":"Model predictive control"},{"location":"getting-started/","text":"C++ API NASOQ is a header-only library and does not need to be compiled. To use it in your code, you need to include <nasoq.h> in your code and add NASOQ to the list of libraries. NASOQ needs METIS and MKL BLAS Libraries as prerequisites. Paths to these two libraries shoule be specifies by setting variables XX and XX as shown: cmake -DXX -DXX = -DCMAKE_BULD_TYPE = release .. One example of using nasoq is shown in the repository in nasoq/eigen_interface . After installing you can use it as below: #include <nasoq.h> int main (){ ... } For details about inputs, outputs, and settings of nasoq please see the NASOQ document page . Command-line interface In addition to library API, a terminal interface is also provided. The terminal interface can be launched by calling NASOQ-BIN with an input QP problem. The list of switches, which can be seen by commanding NASOQ-BIN -h , is shown below: -i : -o : For details of switches please check NASOQ document page .","title":"Getting Started"},{"location":"getting-started/#c-api","text":"NASOQ is a header-only library and does not need to be compiled. To use it in your code, you need to include <nasoq.h> in your code and add NASOQ to the list of libraries. NASOQ needs METIS and MKL BLAS Libraries as prerequisites. Paths to these two libraries shoule be specifies by setting variables XX and XX as shown: cmake -DXX -DXX = -DCMAKE_BULD_TYPE = release .. One example of using nasoq is shown in the repository in nasoq/eigen_interface . After installing you can use it as below: #include <nasoq.h> int main (){ ... } For details about inputs, outputs, and settings of nasoq please see the NASOQ document page .","title":"C++ API"},{"location":"getting-started/#command-line-interface","text":"In addition to library API, a terminal interface is also provided. The terminal interface can be launched by calling NASOQ-BIN with an input QP problem. The list of switches, which can be seen by commanding NASOQ-BIN -h , is shown below: -i : -o : For details of switches please check NASOQ document page .","title":"Command-line interface"},{"location":"interfaces/","text":"Eigen interface Matlab interface","title":"Interfaces"},{"location":"interfaces/#eigen-interface","text":"","title":"Eigen interface"},{"location":"interfaces/#matlab-interface","text":"","title":"Matlab interface"},{"location":"linear-solver/","text":"LBL linear solver As discussed in XX, NASOQ solves","title":"LBL Indefinite solver"},{"location":"linear-solver/#lbl-linear-solver","text":"As discussed in XX, NASOQ solves","title":"LBL linear solver"},{"location":"repository/","text":"Applications Storage format Loading a QP Exporting a QP","title":"Sparse QP Repository"},{"location":"repository/#applications","text":"","title":"Applications"},{"location":"repository/#storage-format","text":"","title":"Storage format"},{"location":"repository/#loading-a-qp","text":"","title":"Loading a QP"},{"location":"repository/#exporting-a-qp","text":"","title":"Exporting a QP"},{"location":"solver/","text":"Algorithm overview NASOQ focuses on the solution of convex quadratic programming problems to find the linearly constrained minimizers of quadratic energies. In full generality our problem then is \\begin{align} \\label{eq:qp} \\min_x \\quad \\frac{1}{2} x^THx + q^Tx \\quad \\text{s.t.} \\quad Ax=b, \\quad C x\\leq d \\end{align} where the unknown minimizer x \\in \\mathbb{R}^n x \\in \\mathbb{R}^n is constrained by linear equality constraints A x=b A x=b and inequality constraints Cx\\leq d Cx\\leq d . Note that in many cases we may have only inequality or equality constraints. However, in the following, without loss of generality, we consider the full mixed case. Here the symmetric matrix H H is, either by construction or standard user regularization, a positive-definite matrix thus the QP is strictly convex. Variants NASOQ has two variants: NASOQ-Fixed and NASOQ-Tuned and each of these two variants individually offer a different balance in the trade-off between efficiency and accuracy for larger scale problems. A key feature of NASOQ is that in our construction of the linear system solver, i.e., LBL and the row modification, i.e., SoMoD we expose three parameters with direct and intuitive interpretations that enable us to balance efficiency against accuracy for different applications and problem scales. These three parameters are: max_iter: the maximum number of refinement iterations for incrementally improving the solution of a KKT system after the solve phase; stop_tol: the threshold defining the upper bound for the residual accuracy of the KKT system during the refinement phase; diag_perturb: value added to zero-entry diagonals of the KKT matrix to stabilize LBL and row modification in SoMod. NASOQ-Fixed works well across the board without tuning a default setting. To use NASOQ-Fixed you can set nasoq->variant = Fixed . NASOQ-Tuned uses a range of reasonable settings for these three parameters known as a priori, to perform a rapid sweep for improved accuracy. The setting for activating NASOQ-Tuned is: nasoq->variant = Tuned . Termination criteria The termination criteria in NASOQ are four conditions that are known as KKT conditions and listed below: $$ where \\epsilon \\epsilon is the accuracy threshold and is determined by the user. A lower accuracy typically needs more iterations. The termination criteria in different solver might differ depending how the accuracy threshold is defined. Some solvers use a relative criteria, i.e. normalizing the requested accuracy with a problem-related norm and some other supports both. It is important to know because of this, the definition of accurate in different solvers are different. We found absolute criteria do not often lead to false convergence and thus depending on the application nature, an optimistic accuracy threshold would work well. Relative tolerance however, require selecting a very small threshold to ensure accuracy for different problems. To set the accuracy threshold in NASOQ, you may use the following: nasoq->eps = 1e-3; Settings","title":"NASOQ QP solver"},{"location":"solver/#algorithm-overview","text":"NASOQ focuses on the solution of convex quadratic programming problems to find the linearly constrained minimizers of quadratic energies. In full generality our problem then is \\begin{align} \\label{eq:qp} \\min_x \\quad \\frac{1}{2} x^THx + q^Tx \\quad \\text{s.t.} \\quad Ax=b, \\quad C x\\leq d \\end{align} where the unknown minimizer x \\in \\mathbb{R}^n x \\in \\mathbb{R}^n is constrained by linear equality constraints A x=b A x=b and inequality constraints Cx\\leq d Cx\\leq d . Note that in many cases we may have only inequality or equality constraints. However, in the following, without loss of generality, we consider the full mixed case. Here the symmetric matrix H H is, either by construction or standard user regularization, a positive-definite matrix thus the QP is strictly convex.","title":"Algorithm overview"},{"location":"solver/#variants","text":"NASOQ has two variants: NASOQ-Fixed and NASOQ-Tuned and each of these two variants individually offer a different balance in the trade-off between efficiency and accuracy for larger scale problems. A key feature of NASOQ is that in our construction of the linear system solver, i.e., LBL and the row modification, i.e., SoMoD we expose three parameters with direct and intuitive interpretations that enable us to balance efficiency against accuracy for different applications and problem scales. These three parameters are: max_iter: the maximum number of refinement iterations for incrementally improving the solution of a KKT system after the solve phase; stop_tol: the threshold defining the upper bound for the residual accuracy of the KKT system during the refinement phase; diag_perturb: value added to zero-entry diagonals of the KKT matrix to stabilize LBL and row modification in SoMod. NASOQ-Fixed works well across the board without tuning a default setting. To use NASOQ-Fixed you can set nasoq->variant = Fixed . NASOQ-Tuned uses a range of reasonable settings for these three parameters known as a priori, to perform a rapid sweep for improved accuracy. The setting for activating NASOQ-Tuned is: nasoq->variant = Tuned .","title":"Variants"},{"location":"solver/#termination-criteria","text":"The termination criteria in NASOQ are four conditions that are known as KKT conditions and listed below: $$ where \\epsilon \\epsilon is the accuracy threshold and is determined by the user. A lower accuracy typically needs more iterations. The termination criteria in different solver might differ depending how the accuracy threshold is defined. Some solvers use a relative criteria, i.e. normalizing the requested accuracy with a problem-related norm and some other supports both. It is important to know because of this, the definition of accurate in different solvers are different. We found absolute criteria do not often lead to false convergence and thus depending on the application nature, an optimistic accuracy threshold would work well. Relative tolerance however, require selecting a very small threshold to ensure accuracy for different problems. To set the accuracy threshold in NASOQ, you may use the following: nasoq->eps = 1e-3;","title":"Termination criteria"},{"location":"solver/#settings","text":"","title":"Settings"}]}